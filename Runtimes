Binary search - avg and worst = O(log N) 
Each time you are comparing the middle of the array to the target and discarding half of the array. 
If you keep dividing and only searching in half until you either find the target or it is not there - that is log2(N). Therefore, log(N)
shows the runtime as the input size grows = time complexity.
              - best O(1) 
This is if your target is the first element you choose/middle of the array.
  1. search on a sorted array/sorted balanced tree is the same
  2. completely skewed tree (all elements are on the right or left) would be O(N)
